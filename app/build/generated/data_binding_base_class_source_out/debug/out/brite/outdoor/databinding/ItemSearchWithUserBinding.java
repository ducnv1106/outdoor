// Generated by view binder compiler. Do not edit!
package brite.outdoor.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import brite.outdoor.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemSearchWithUserBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView btnFollow;

  @NonNull
  public final ConstraintLayout clRoot;

  @NonNull
  public final Guideline glVStartContent;

  @NonNull
  public final AppCompatImageView ivAvatar;

  @NonNull
  public final AppCompatTextView tvName;

  @NonNull
  public final View viewFooter;

  private ItemSearchWithUserBinding(@NonNull ConstraintLayout rootView, @NonNull TextView btnFollow,
      @NonNull ConstraintLayout clRoot, @NonNull Guideline glVStartContent,
      @NonNull AppCompatImageView ivAvatar, @NonNull AppCompatTextView tvName,
      @NonNull View viewFooter) {
    this.rootView = rootView;
    this.btnFollow = btnFollow;
    this.clRoot = clRoot;
    this.glVStartContent = glVStartContent;
    this.ivAvatar = ivAvatar;
    this.tvName = tvName;
    this.viewFooter = viewFooter;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemSearchWithUserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemSearchWithUserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_search_with_user, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemSearchWithUserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnFollow;
      TextView btnFollow = rootView.findViewById(id);
      if (btnFollow == null) {
        break missingId;
      }

      id = R.id.clRoot;
      ConstraintLayout clRoot = rootView.findViewById(id);
      if (clRoot == null) {
        break missingId;
      }

      id = R.id.glVStartContent;
      Guideline glVStartContent = rootView.findViewById(id);
      if (glVStartContent == null) {
        break missingId;
      }

      id = R.id.ivAvatar;
      AppCompatImageView ivAvatar = rootView.findViewById(id);
      if (ivAvatar == null) {
        break missingId;
      }

      id = R.id.tvName;
      AppCompatTextView tvName = rootView.findViewById(id);
      if (tvName == null) {
        break missingId;
      }

      id = R.id.viewFooter;
      View viewFooter = rootView.findViewById(id);
      if (viewFooter == null) {
        break missingId;
      }

      return new ItemSearchWithUserBinding((ConstraintLayout) rootView, btnFollow, clRoot,
          glVStartContent, ivAvatar, tvName, viewFooter);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
