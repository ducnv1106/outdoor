// Generated by Dagger (https://dagger.dev).
package brite.outdoor.di;

import brite.outdoor.data.remote.ApiController;
import brite.outdoor.data.remote.CallApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideApiControllerFactory implements Factory<ApiController> {
  private final Provider<CallApiService> apiServiceProvider;

  public AppModule_ProvideApiControllerFactory(Provider<CallApiService> apiServiceProvider) {
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public ApiController get() {
    return provideApiController(apiServiceProvider.get());
  }

  public static AppModule_ProvideApiControllerFactory create(
      Provider<CallApiService> apiServiceProvider) {
    return new AppModule_ProvideApiControllerFactory(apiServiceProvider);
  }

  public static ApiController provideApiController(CallApiService apiService) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideApiController(apiService));
  }
}
