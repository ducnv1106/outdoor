// Generated by Dagger (https://dagger.dev).
package brite.outdoor.app;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import brite.outdoor.data.local.room.AppDao;
import brite.outdoor.data.local.room.AppDatabase;
import brite.outdoor.data.remote.ApiController;
import brite.outdoor.data.remote.CallApiService;
import brite.outdoor.data.repository.AppRepository;
import brite.outdoor.di.AppModule;
import brite.outdoor.di.AppModule_ProvideApiControllerFactory;
import brite.outdoor.di.AppModule_ProvideAppDapFactory;
import brite.outdoor.di.AppModule_ProvideCharacterServiceFactory;
import brite.outdoor.di.AppModule_ProvideDatabaseFactory;
import brite.outdoor.di.AppModule_ProvideGsonFactory;
import brite.outdoor.di.AppModule_ProvideRetrofitFactory;
import brite.outdoor.ui.activities.CameraActivity;
import brite.outdoor.ui.activities.MainActivity;
import brite.outdoor.ui.activities.MediaActivity;
import brite.outdoor.ui.dialog.DialogComment;
import brite.outdoor.ui.dialog.DialogCommentHotNews;
import brite.outdoor.ui.dialog.DialogFragmentAddImageAvatarNew;
import brite.outdoor.ui.dialog.DialogFragmentAddImagesNew;
import brite.outdoor.ui.dialog.DialogFragmentReminder;
import brite.outdoor.ui.dialog.DialogFragmentReport;
import brite.outdoor.ui.dialog.FrmEditBlockPost;
import brite.outdoor.ui.fragments.BottomSheetDialogFrHome;
import brite.outdoor.ui.fragments.FrmDetail;
import brite.outdoor.ui.fragments.FrmDetailHotNews;
import brite.outdoor.ui.fragments.FrmHome;
import brite.outdoor.ui.fragments.FrmListPeopleInteractive;
import brite.outdoor.ui.fragments.FrmListPostLocation;
import brite.outdoor.ui.fragments.FrmLogin;
import brite.outdoor.ui.fragments.FrmNotification;
import brite.outdoor.ui.fragments.FrmPersonalPage;
import brite.outdoor.ui.fragments.FrmPushPostsNew;
import brite.outdoor.ui.fragments.FrmSelectedUtensilsNew;
import brite.outdoor.ui.fragments.FrmSetting;
import brite.outdoor.ui.fragments.home.FrmFocus;
import brite.outdoor.ui.fragments.home.FrmFollow;
import brite.outdoor.ui.fragments.home.FrmHotNews;
import brite.outdoor.ui.fragments.home.FrmNew;
import brite.outdoor.ui.fragments.media.PreviewFragment;
import brite.outdoor.ui.fragments.my_page.FrmLocationSave;
import brite.outdoor.ui.fragments.my_page.FrmMyBookMart;
import brite.outdoor.ui.fragments.my_page.FrmMyPage;
import brite.outdoor.ui.fragments.my_page.FrmMyPost;
import brite.outdoor.ui.fragments.question.FrmCommentQuestion;
import brite.outdoor.ui.fragments.question.FrmEditQuestion;
import brite.outdoor.ui.fragments.question.FrmFrequentQuestion;
import brite.outdoor.ui.fragments.question.FrmQuestion;
import brite.outdoor.ui.fragments.question.FrmSaveQuestion;
import brite.outdoor.ui.fragments.search.FrmSearchLocation;
import brite.outdoor.ui.fragments.search.FrmSearchUser;
import brite.outdoor.ui.fragments.search.FrmSearchUtensils;
import brite.outdoor.ui.fragments.search.FrmSearchVer2;
import brite.outdoor.ui.fragments.select_place.FrmMap;
import brite.outdoor.ui.fragments.select_place.FrmMapNew;
import brite.outdoor.viewmodel.AuthViewModel;
import brite.outdoor.viewmodel.AuthViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.BottomSheetDialogFrmHomeViewModel;
import brite.outdoor.viewmodel.BottomSheetDialogFrmHomeViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.CameraViewModel;
import brite.outdoor.viewmodel.CameraViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.CommentHotNewsViewModel;
import brite.outdoor.viewmodel.CommentHotNewsViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.CommentQuestionViewModel;
import brite.outdoor.viewmodel.CommentQuestionViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.CommentViewModel;
import brite.outdoor.viewmodel.CommentViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.DetailHotNewsViewModel;
import brite.outdoor.viewmodel.DetailHotNewsViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.DetailViewModel;
import brite.outdoor.viewmodel.DetailViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.EditQuestionViewModel;
import brite.outdoor.viewmodel.EditQuestionViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.FocusViewModel;
import brite.outdoor.viewmodel.FocusViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.FollowViewModel;
import brite.outdoor.viewmodel.FollowViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.FrequentQuestionViewModel;
import brite.outdoor.viewmodel.FrequentQuestionViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.HomeViewModel;
import brite.outdoor.viewmodel.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.HotNewsViewModel;
import brite.outdoor.viewmodel.HotNewsViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.LikeViewModel;
import brite.outdoor.viewmodel.LikeViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.ListPeopleInteractiveViewModel;
import brite.outdoor.viewmodel.ListPeopleInteractiveViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.ListPostLocationViewModel;
import brite.outdoor.viewmodel.ListPostLocationViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.LocationSaveViewModel;
import brite.outdoor.viewmodel.LocationSaveViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.MediaViewModel;
import brite.outdoor.viewmodel.MediaViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.MyBookmarkViewModel;
import brite.outdoor.viewmodel.MyBookmarkViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.MyPageViewModel;
import brite.outdoor.viewmodel.MyPageViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.NewViewModel;
import brite.outdoor.viewmodel.NewViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.NotificationViewModel;
import brite.outdoor.viewmodel.NotificationViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.PushPostViewModel;
import brite.outdoor.viewmodel.PushPostViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.QuestionViewModel;
import brite.outdoor.viewmodel.QuestionViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.ReminderViewModel;
import brite.outdoor.viewmodel.ReminderViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.ReportViewModel;
import brite.outdoor.viewmodel.ReportViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.SavedQuestionViewModel;
import brite.outdoor.viewmodel.SavedQuestionViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.SearchViewModel;
import brite.outdoor.viewmodel.SearchViewModel_HiltModules_KeyModule_ProvideFactory;
import brite.outdoor.viewmodel.SelectPlaceViewModel;
import brite.outdoor.viewmodel.SelectPlaceViewModel_HiltModules_KeyModule_ProvideFactory;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApplication_HiltComponents_SingletonC extends MyApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object appDatabase = new MemoizedSentinel();

  private volatile Object appDao = new MemoizedSentinel();

  private DaggerMyApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvideRetrofitFactory.provideRetrofit(AppModule_ProvideGsonFactory.provideGson());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private CallApiService callApiService() {
    return AppModule_ProvideCharacterServiceFactory.provideCharacterService(retrofit());
  }

  private ApiController apiController() {
    return AppModule_ProvideApiControllerFactory.provideApiController(callApiService());
  }

  private AppDatabase appDatabase() {
    Object local = appDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = appDatabase;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvideDatabaseFactory.provideDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          appDatabase = DoubleCheck.reentrantCheck(appDatabase, local);
        }
      }
    }
    return (AppDatabase) local;
  }

  private AppDao appDao() {
    Object local = appDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = appDao;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvideAppDapFactory.provideAppDap(appDatabase());
          appDao = DoubleCheck.reentrantCheck(appDao, local);
        }
      }
    }
    return (AppDao) local;
  }

  @Override
  public void injectMyApplication(MyApplication myApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public MyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerMyApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements MyApplication_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public MyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends MyApplication_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements MyApplication_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public MyApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends MyApplication_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectCameraActivity(CameraActivity cameraActivity) {
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public void injectMediaActivity(MediaActivity mediaActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMyApplication_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(), ImmutableSet.<ViewModelProvider.Factory>of(), ImmutableSet.<ViewModelProvider.Factory>of());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return ImmutableSet.<String>of(AuthViewModel_HiltModules_KeyModule_ProvideFactory.provide(), BottomSheetDialogFrmHomeViewModel_HiltModules_KeyModule_ProvideFactory.provide(), CameraViewModel_HiltModules_KeyModule_ProvideFactory.provide(), CommentHotNewsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), CommentQuestionViewModel_HiltModules_KeyModule_ProvideFactory.provide(), CommentViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DetailHotNewsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DetailViewModel_HiltModules_KeyModule_ProvideFactory.provide(), EditQuestionViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FocusViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FollowViewModel_HiltModules_KeyModule_ProvideFactory.provide(), FrequentQuestionViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HotNewsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LikeViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ListPeopleInteractiveViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ListPostLocationViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LocationSaveViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MediaViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MyBookmarkViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MyPageViewModel_HiltModules_KeyModule_ProvideFactory.provide(), NewViewModel_HiltModules_KeyModule_ProvideFactory.provide(), NotificationViewModel_HiltModules_KeyModule_ProvideFactory.provide(), PushPostViewModel_HiltModules_KeyModule_ProvideFactory.provide(), QuestionViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ReminderViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ReportViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SavedQuestionViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SearchViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SelectPlaceViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements MyApplication_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public MyApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCImpl(fragment);
        }
      }

      private final class FragmentCImpl extends MyApplication_HiltComponents.FragmentC {
        private FragmentCImpl(Fragment fragment) {

        }

        @Override
        public void injectDialogCommentHotNews(DialogCommentHotNews dialogCommentHotNews) {
        }

        @Override
        public void injectDialogComment(DialogComment dialogComment) {
        }

        @Override
        public void injectDialogFragmentAddImageAvatarNew(
            DialogFragmentAddImageAvatarNew dialogFragmentAddImageAvatarNew) {
        }

        @Override
        public void injectDialogFragmentAddImagesNew(
            DialogFragmentAddImagesNew dialogFragmentAddImagesNew) {
        }

        @Override
        public void injectDialogFragmentReminder(DialogFragmentReminder dialogFragmentReminder) {
        }

        @Override
        public void injectDialogFragmentReport(DialogFragmentReport dialogFragmentReport) {
        }

        @Override
        public void injectFrmEditBlockPost(FrmEditBlockPost frmEditBlockPost) {
        }

        @Override
        public void injectBottomSheetDialogFrHome(BottomSheetDialogFrHome bottomSheetDialogFrHome) {
        }

        @Override
        public void injectFrmDetailHotNews(FrmDetailHotNews frmDetailHotNews) {
        }

        @Override
        public void injectFrmDetail(FrmDetail frmDetail) {
        }

        @Override
        public void injectFrmHome(FrmHome frmHome) {
        }

        @Override
        public void injectFrmListPeopleInteractive(
            FrmListPeopleInteractive frmListPeopleInteractive) {
        }

        @Override
        public void injectFrmListPostLocation(FrmListPostLocation frmListPostLocation) {
        }

        @Override
        public void injectFrmLogin(FrmLogin frmLogin) {
        }

        @Override
        public void injectFrmNotification(FrmNotification frmNotification) {
        }

        @Override
        public void injectFrmPersonalPage(FrmPersonalPage frmPersonalPage) {
        }

        @Override
        public void injectFrmPushPostsNew(FrmPushPostsNew frmPushPostsNew) {
        }

        @Override
        public void injectFrmSelectedUtensilsNew(FrmSelectedUtensilsNew frmSelectedUtensilsNew) {
        }

        @Override
        public void injectFrmSetting(FrmSetting frmSetting) {
        }

        @Override
        public void injectFrmFocus(FrmFocus frmFocus) {
        }

        @Override
        public void injectFrmFollow(FrmFollow frmFollow) {
        }

        @Override
        public void injectFrmHotNews(FrmHotNews frmHotNews) {
        }

        @Override
        public void injectFrmNew(FrmNew frmNew) {
        }

        @Override
        public void injectPreviewFragment(PreviewFragment previewFragment) {
        }

        @Override
        public void injectFrmLocationSave(FrmLocationSave frmLocationSave) {
        }

        @Override
        public void injectFrmMyBookMart(FrmMyBookMart frmMyBookMart) {
        }

        @Override
        public void injectFrmMyPage(FrmMyPage frmMyPage) {
        }

        @Override
        public void injectFrmMyPost(FrmMyPost frmMyPost) {
        }

        @Override
        public void injectFrmCommentQuestion(FrmCommentQuestion frmCommentQuestion) {
        }

        @Override
        public void injectFrmEditQuestion(FrmEditQuestion frmEditQuestion) {
        }

        @Override
        public void injectFrmFrequentQuestion(FrmFrequentQuestion frmFrequentQuestion) {
        }

        @Override
        public void injectFrmQuestion(FrmQuestion frmQuestion) {
        }

        @Override
        public void injectFrmSaveQuestion(FrmSaveQuestion frmSaveQuestion) {
        }

        @Override
        public void injectFrmSearchLocation(FrmSearchLocation frmSearchLocation) {
        }

        @Override
        public void injectFrmSearchUser(FrmSearchUser frmSearchUser) {
        }

        @Override
        public void injectFrmSearchUtensils(FrmSearchUtensils frmSearchUtensils) {
        }

        @Override
        public void injectFrmSearchVer2(FrmSearchVer2 frmSearchVer2) {
        }

        @Override
        public void injectFrmMapNew(FrmMapNew frmMapNew) {
        }

        @Override
        public void injectFrmMap(FrmMap frmMap) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements MyApplication_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public MyApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCImpl(view);
          }
        }

        private final class ViewWithFragmentCImpl extends MyApplication_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCImpl(View view) {

          }
        }
      }

      private final class ViewCBuilder implements MyApplication_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public MyApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCImpl(view);
        }
      }

      private final class ViewCImpl extends MyApplication_HiltComponents.ViewC {
        private ViewCImpl(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements MyApplication_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public MyApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends MyApplication_HiltComponents.ViewModelC {
      private volatile Provider<AuthViewModel> authViewModelProvider;

      private volatile Provider<BottomSheetDialogFrmHomeViewModel> bottomSheetDialogFrmHomeViewModelProvider;

      private volatile Provider<CameraViewModel> cameraViewModelProvider;

      private volatile Provider<CommentHotNewsViewModel> commentHotNewsViewModelProvider;

      private volatile Provider<CommentQuestionViewModel> commentQuestionViewModelProvider;

      private volatile Provider<CommentViewModel> commentViewModelProvider;

      private volatile Provider<DetailHotNewsViewModel> detailHotNewsViewModelProvider;

      private volatile Provider<DetailViewModel> detailViewModelProvider;

      private volatile Provider<EditQuestionViewModel> editQuestionViewModelProvider;

      private volatile Provider<FocusViewModel> focusViewModelProvider;

      private volatile Provider<FollowViewModel> followViewModelProvider;

      private volatile Provider<FrequentQuestionViewModel> frequentQuestionViewModelProvider;

      private volatile Provider<HomeViewModel> homeViewModelProvider;

      private volatile Provider<HotNewsViewModel> hotNewsViewModelProvider;

      private volatile Provider<LikeViewModel> likeViewModelProvider;

      private volatile Provider<ListPeopleInteractiveViewModel> listPeopleInteractiveViewModelProvider;

      private volatile Provider<ListPostLocationViewModel> listPostLocationViewModelProvider;

      private volatile Provider<LocationSaveViewModel> locationSaveViewModelProvider;

      private volatile Provider<MediaViewModel> mediaViewModelProvider;

      private volatile Provider<MyBookmarkViewModel> myBookmarkViewModelProvider;

      private volatile Provider<MyPageViewModel> myPageViewModelProvider;

      private volatile Provider<NewViewModel> newViewModelProvider;

      private volatile Provider<NotificationViewModel> notificationViewModelProvider;

      private volatile Provider<PushPostViewModel> pushPostViewModelProvider;

      private volatile Provider<QuestionViewModel> questionViewModelProvider;

      private volatile Provider<ReminderViewModel> reminderViewModelProvider;

      private volatile Provider<ReportViewModel> reportViewModelProvider;

      private volatile Provider<SavedQuestionViewModel> savedQuestionViewModelProvider;

      private volatile Provider<SearchViewModel> searchViewModelProvider;

      private volatile Provider<SelectPlaceViewModel> selectPlaceViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private AppRepository appRepository() {
        return new AppRepository(DaggerMyApplication_HiltComponents_SingletonC.this.appDao());
      }

      private AuthViewModel authViewModel() {
        return new AuthViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController(), appRepository());
      }

      private Provider<AuthViewModel> authViewModelProvider() {
        Object local = authViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          authViewModelProvider = (Provider<AuthViewModel>) local;
        }
        return (Provider<AuthViewModel>) local;
      }

      private BottomSheetDialogFrmHomeViewModel bottomSheetDialogFrmHomeViewModel() {
        return new BottomSheetDialogFrmHomeViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<BottomSheetDialogFrmHomeViewModel> bottomSheetDialogFrmHomeViewModelProvider(
          ) {
        Object local = bottomSheetDialogFrmHomeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          bottomSheetDialogFrmHomeViewModelProvider = (Provider<BottomSheetDialogFrmHomeViewModel>) local;
        }
        return (Provider<BottomSheetDialogFrmHomeViewModel>) local;
      }

      private CameraViewModel cameraViewModel() {
        return new CameraViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<CameraViewModel> cameraViewModelProvider() {
        Object local = cameraViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          cameraViewModelProvider = (Provider<CameraViewModel>) local;
        }
        return (Provider<CameraViewModel>) local;
      }

      private CommentHotNewsViewModel commentHotNewsViewModel() {
        return new CommentHotNewsViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<CommentHotNewsViewModel> commentHotNewsViewModelProvider() {
        Object local = commentHotNewsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(3);
          commentHotNewsViewModelProvider = (Provider<CommentHotNewsViewModel>) local;
        }
        return (Provider<CommentHotNewsViewModel>) local;
      }

      private CommentQuestionViewModel commentQuestionViewModel() {
        return new CommentQuestionViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<CommentQuestionViewModel> commentQuestionViewModelProvider() {
        Object local = commentQuestionViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(4);
          commentQuestionViewModelProvider = (Provider<CommentQuestionViewModel>) local;
        }
        return (Provider<CommentQuestionViewModel>) local;
      }

      private CommentViewModel commentViewModel() {
        return new CommentViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<CommentViewModel> commentViewModelProvider() {
        Object local = commentViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(5);
          commentViewModelProvider = (Provider<CommentViewModel>) local;
        }
        return (Provider<CommentViewModel>) local;
      }

      private DetailHotNewsViewModel detailHotNewsViewModel() {
        return new DetailHotNewsViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<DetailHotNewsViewModel> detailHotNewsViewModelProvider() {
        Object local = detailHotNewsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(6);
          detailHotNewsViewModelProvider = (Provider<DetailHotNewsViewModel>) local;
        }
        return (Provider<DetailHotNewsViewModel>) local;
      }

      private DetailViewModel detailViewModel() {
        return new DetailViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<DetailViewModel> detailViewModelProvider() {
        Object local = detailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(7);
          detailViewModelProvider = (Provider<DetailViewModel>) local;
        }
        return (Provider<DetailViewModel>) local;
      }

      private EditQuestionViewModel editQuestionViewModel() {
        return new EditQuestionViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<EditQuestionViewModel> editQuestionViewModelProvider() {
        Object local = editQuestionViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(8);
          editQuestionViewModelProvider = (Provider<EditQuestionViewModel>) local;
        }
        return (Provider<EditQuestionViewModel>) local;
      }

      private FocusViewModel focusViewModel() {
        return new FocusViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<FocusViewModel> focusViewModelProvider() {
        Object local = focusViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(9);
          focusViewModelProvider = (Provider<FocusViewModel>) local;
        }
        return (Provider<FocusViewModel>) local;
      }

      private FollowViewModel followViewModel() {
        return new FollowViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<FollowViewModel> followViewModelProvider() {
        Object local = followViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(10);
          followViewModelProvider = (Provider<FollowViewModel>) local;
        }
        return (Provider<FollowViewModel>) local;
      }

      private FrequentQuestionViewModel frequentQuestionViewModel() {
        return new FrequentQuestionViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<FrequentQuestionViewModel> frequentQuestionViewModelProvider() {
        Object local = frequentQuestionViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(11);
          frequentQuestionViewModelProvider = (Provider<FrequentQuestionViewModel>) local;
        }
        return (Provider<FrequentQuestionViewModel>) local;
      }

      private Provider<HomeViewModel> homeViewModelProvider() {
        Object local = homeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(12);
          homeViewModelProvider = (Provider<HomeViewModel>) local;
        }
        return (Provider<HomeViewModel>) local;
      }

      private HotNewsViewModel hotNewsViewModel() {
        return new HotNewsViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<HotNewsViewModel> hotNewsViewModelProvider() {
        Object local = hotNewsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(13);
          hotNewsViewModelProvider = (Provider<HotNewsViewModel>) local;
        }
        return (Provider<HotNewsViewModel>) local;
      }

      private LikeViewModel likeViewModel() {
        return new LikeViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<LikeViewModel> likeViewModelProvider() {
        Object local = likeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(14);
          likeViewModelProvider = (Provider<LikeViewModel>) local;
        }
        return (Provider<LikeViewModel>) local;
      }

      private ListPeopleInteractiveViewModel listPeopleInteractiveViewModel() {
        return new ListPeopleInteractiveViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<ListPeopleInteractiveViewModel> listPeopleInteractiveViewModelProvider() {
        Object local = listPeopleInteractiveViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(15);
          listPeopleInteractiveViewModelProvider = (Provider<ListPeopleInteractiveViewModel>) local;
        }
        return (Provider<ListPeopleInteractiveViewModel>) local;
      }

      private ListPostLocationViewModel listPostLocationViewModel() {
        return new ListPostLocationViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<ListPostLocationViewModel> listPostLocationViewModelProvider() {
        Object local = listPostLocationViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(16);
          listPostLocationViewModelProvider = (Provider<ListPostLocationViewModel>) local;
        }
        return (Provider<ListPostLocationViewModel>) local;
      }

      private LocationSaveViewModel locationSaveViewModel() {
        return new LocationSaveViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<LocationSaveViewModel> locationSaveViewModelProvider() {
        Object local = locationSaveViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(17);
          locationSaveViewModelProvider = (Provider<LocationSaveViewModel>) local;
        }
        return (Provider<LocationSaveViewModel>) local;
      }

      private MediaViewModel mediaViewModel() {
        return new MediaViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<MediaViewModel> mediaViewModelProvider() {
        Object local = mediaViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(18);
          mediaViewModelProvider = (Provider<MediaViewModel>) local;
        }
        return (Provider<MediaViewModel>) local;
      }

      private MyBookmarkViewModel myBookmarkViewModel() {
        return new MyBookmarkViewModel(DaggerMyApplication_HiltComponents_SingletonC.this.apiController(), AppModule_ProvideGsonFactory.provideGson());
      }

      private Provider<MyBookmarkViewModel> myBookmarkViewModelProvider() {
        Object local = myBookmarkViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(19);
          myBookmarkViewModelProvider = (Provider<MyBookmarkViewModel>) local;
        }
        return (Provider<MyBookmarkViewModel>) local;
      }

      private MyPageViewModel myPageViewModel() {
        return new MyPageViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<MyPageViewModel> myPageViewModelProvider() {
        Object local = myPageViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(20);
          myPageViewModelProvider = (Provider<MyPageViewModel>) local;
        }
        return (Provider<MyPageViewModel>) local;
      }

      private NewViewModel newViewModel() {
        return new NewViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<NewViewModel> newViewModelProvider() {
        Object local = newViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(21);
          newViewModelProvider = (Provider<NewViewModel>) local;
        }
        return (Provider<NewViewModel>) local;
      }

      private NotificationViewModel notificationViewModel() {
        return new NotificationViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<NotificationViewModel> notificationViewModelProvider() {
        Object local = notificationViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(22);
          notificationViewModelProvider = (Provider<NotificationViewModel>) local;
        }
        return (Provider<NotificationViewModel>) local;
      }

      private PushPostViewModel pushPostViewModel() {
        return new PushPostViewModel(appRepository(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController(), AppModule_ProvideGsonFactory.provideGson());
      }

      private Provider<PushPostViewModel> pushPostViewModelProvider() {
        Object local = pushPostViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(23);
          pushPostViewModelProvider = (Provider<PushPostViewModel>) local;
        }
        return (Provider<PushPostViewModel>) local;
      }

      private QuestionViewModel questionViewModel() {
        return new QuestionViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<QuestionViewModel> questionViewModelProvider() {
        Object local = questionViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(24);
          questionViewModelProvider = (Provider<QuestionViewModel>) local;
        }
        return (Provider<QuestionViewModel>) local;
      }

      private ReminderViewModel reminderViewModel() {
        return new ReminderViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController(), appRepository(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerMyApplication_HiltComponents_SingletonC.this.applicationContextModule));
      }

      private Provider<ReminderViewModel> reminderViewModelProvider() {
        Object local = reminderViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(25);
          reminderViewModelProvider = (Provider<ReminderViewModel>) local;
        }
        return (Provider<ReminderViewModel>) local;
      }

      private ReportViewModel reportViewModel() {
        return new ReportViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<ReportViewModel> reportViewModelProvider() {
        Object local = reportViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(26);
          reportViewModelProvider = (Provider<ReportViewModel>) local;
        }
        return (Provider<ReportViewModel>) local;
      }

      private SavedQuestionViewModel savedQuestionViewModel() {
        return new SavedQuestionViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<SavedQuestionViewModel> savedQuestionViewModelProvider() {
        Object local = savedQuestionViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(27);
          savedQuestionViewModelProvider = (Provider<SavedQuestionViewModel>) local;
        }
        return (Provider<SavedQuestionViewModel>) local;
      }

      private SearchViewModel searchViewModel() {
        return new SearchViewModel(AppModule_ProvideGsonFactory.provideGson(), DaggerMyApplication_HiltComponents_SingletonC.this.apiController());
      }

      private Provider<SearchViewModel> searchViewModelProvider() {
        Object local = searchViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(28);
          searchViewModelProvider = (Provider<SearchViewModel>) local;
        }
        return (Provider<SearchViewModel>) local;
      }

      private Provider<SelectPlaceViewModel> selectPlaceViewModelProvider() {
        Object local = selectPlaceViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(29);
          selectPlaceViewModelProvider = (Provider<SelectPlaceViewModel>) local;
        }
        return (Provider<SelectPlaceViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(30).put("brite.outdoor.viewmodel.AuthViewModel", (Provider) authViewModelProvider()).put("brite.outdoor.viewmodel.BottomSheetDialogFrmHomeViewModel", (Provider) bottomSheetDialogFrmHomeViewModelProvider()).put("brite.outdoor.viewmodel.CameraViewModel", (Provider) cameraViewModelProvider()).put("brite.outdoor.viewmodel.CommentHotNewsViewModel", (Provider) commentHotNewsViewModelProvider()).put("brite.outdoor.viewmodel.CommentQuestionViewModel", (Provider) commentQuestionViewModelProvider()).put("brite.outdoor.viewmodel.CommentViewModel", (Provider) commentViewModelProvider()).put("brite.outdoor.viewmodel.DetailHotNewsViewModel", (Provider) detailHotNewsViewModelProvider()).put("brite.outdoor.viewmodel.DetailViewModel", (Provider) detailViewModelProvider()).put("brite.outdoor.viewmodel.EditQuestionViewModel", (Provider) editQuestionViewModelProvider()).put("brite.outdoor.viewmodel.FocusViewModel", (Provider) focusViewModelProvider()).put("brite.outdoor.viewmodel.FollowViewModel", (Provider) followViewModelProvider()).put("brite.outdoor.viewmodel.FrequentQuestionViewModel", (Provider) frequentQuestionViewModelProvider()).put("brite.outdoor.viewmodel.HomeViewModel", (Provider) homeViewModelProvider()).put("brite.outdoor.viewmodel.HotNewsViewModel", (Provider) hotNewsViewModelProvider()).put("brite.outdoor.viewmodel.LikeViewModel", (Provider) likeViewModelProvider()).put("brite.outdoor.viewmodel.ListPeopleInteractiveViewModel", (Provider) listPeopleInteractiveViewModelProvider()).put("brite.outdoor.viewmodel.ListPostLocationViewModel", (Provider) listPostLocationViewModelProvider()).put("brite.outdoor.viewmodel.LocationSaveViewModel", (Provider) locationSaveViewModelProvider()).put("brite.outdoor.viewmodel.MediaViewModel", (Provider) mediaViewModelProvider()).put("brite.outdoor.viewmodel.MyBookmarkViewModel", (Provider) myBookmarkViewModelProvider()).put("brite.outdoor.viewmodel.MyPageViewModel", (Provider) myPageViewModelProvider()).put("brite.outdoor.viewmodel.NewViewModel", (Provider) newViewModelProvider()).put("brite.outdoor.viewmodel.NotificationViewModel", (Provider) notificationViewModelProvider()).put("brite.outdoor.viewmodel.PushPostViewModel", (Provider) pushPostViewModelProvider()).put("brite.outdoor.viewmodel.QuestionViewModel", (Provider) questionViewModelProvider()).put("brite.outdoor.viewmodel.ReminderViewModel", (Provider) reminderViewModelProvider()).put("brite.outdoor.viewmodel.ReportViewModel", (Provider) reportViewModelProvider()).put("brite.outdoor.viewmodel.SavedQuestionViewModel", (Provider) savedQuestionViewModelProvider()).put("brite.outdoor.viewmodel.SearchViewModel", (Provider) searchViewModelProvider()).put("brite.outdoor.viewmodel.SelectPlaceViewModel", (Provider) selectPlaceViewModelProvider()).build();
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // brite.outdoor.viewmodel.AuthViewModel 
            return (T) ViewModelCImpl.this.authViewModel();

            case 1: // brite.outdoor.viewmodel.BottomSheetDialogFrmHomeViewModel 
            return (T) ViewModelCImpl.this.bottomSheetDialogFrmHomeViewModel();

            case 2: // brite.outdoor.viewmodel.CameraViewModel 
            return (T) ViewModelCImpl.this.cameraViewModel();

            case 3: // brite.outdoor.viewmodel.CommentHotNewsViewModel 
            return (T) ViewModelCImpl.this.commentHotNewsViewModel();

            case 4: // brite.outdoor.viewmodel.CommentQuestionViewModel 
            return (T) ViewModelCImpl.this.commentQuestionViewModel();

            case 5: // brite.outdoor.viewmodel.CommentViewModel 
            return (T) ViewModelCImpl.this.commentViewModel();

            case 6: // brite.outdoor.viewmodel.DetailHotNewsViewModel 
            return (T) ViewModelCImpl.this.detailHotNewsViewModel();

            case 7: // brite.outdoor.viewmodel.DetailViewModel 
            return (T) ViewModelCImpl.this.detailViewModel();

            case 8: // brite.outdoor.viewmodel.EditQuestionViewModel 
            return (T) ViewModelCImpl.this.editQuestionViewModel();

            case 9: // brite.outdoor.viewmodel.FocusViewModel 
            return (T) ViewModelCImpl.this.focusViewModel();

            case 10: // brite.outdoor.viewmodel.FollowViewModel 
            return (T) ViewModelCImpl.this.followViewModel();

            case 11: // brite.outdoor.viewmodel.FrequentQuestionViewModel 
            return (T) ViewModelCImpl.this.frequentQuestionViewModel();

            case 12: // brite.outdoor.viewmodel.HomeViewModel 
            return (T) new HomeViewModel();

            case 13: // brite.outdoor.viewmodel.HotNewsViewModel 
            return (T) ViewModelCImpl.this.hotNewsViewModel();

            case 14: // brite.outdoor.viewmodel.LikeViewModel 
            return (T) ViewModelCImpl.this.likeViewModel();

            case 15: // brite.outdoor.viewmodel.ListPeopleInteractiveViewModel 
            return (T) ViewModelCImpl.this.listPeopleInteractiveViewModel();

            case 16: // brite.outdoor.viewmodel.ListPostLocationViewModel 
            return (T) ViewModelCImpl.this.listPostLocationViewModel();

            case 17: // brite.outdoor.viewmodel.LocationSaveViewModel 
            return (T) ViewModelCImpl.this.locationSaveViewModel();

            case 18: // brite.outdoor.viewmodel.MediaViewModel 
            return (T) ViewModelCImpl.this.mediaViewModel();

            case 19: // brite.outdoor.viewmodel.MyBookmarkViewModel 
            return (T) ViewModelCImpl.this.myBookmarkViewModel();

            case 20: // brite.outdoor.viewmodel.MyPageViewModel 
            return (T) ViewModelCImpl.this.myPageViewModel();

            case 21: // brite.outdoor.viewmodel.NewViewModel 
            return (T) ViewModelCImpl.this.newViewModel();

            case 22: // brite.outdoor.viewmodel.NotificationViewModel 
            return (T) ViewModelCImpl.this.notificationViewModel();

            case 23: // brite.outdoor.viewmodel.PushPostViewModel 
            return (T) ViewModelCImpl.this.pushPostViewModel();

            case 24: // brite.outdoor.viewmodel.QuestionViewModel 
            return (T) ViewModelCImpl.this.questionViewModel();

            case 25: // brite.outdoor.viewmodel.ReminderViewModel 
            return (T) ViewModelCImpl.this.reminderViewModel();

            case 26: // brite.outdoor.viewmodel.ReportViewModel 
            return (T) ViewModelCImpl.this.reportViewModel();

            case 27: // brite.outdoor.viewmodel.SavedQuestionViewModel 
            return (T) ViewModelCImpl.this.savedQuestionViewModel();

            case 28: // brite.outdoor.viewmodel.SearchViewModel 
            return (T) ViewModelCImpl.this.searchViewModel();

            case 29: // brite.outdoor.viewmodel.SelectPlaceViewModel 
            return (T) new SelectPlaceViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements MyApplication_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends MyApplication_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
