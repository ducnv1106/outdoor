// Generated by Dagger (https://dagger.dev).
package brite.outdoor.di;

import brite.outdoor.data.local.room.AppDao;
import brite.outdoor.data.local.room.AppDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideAppDapFactory implements Factory<AppDao> {
  private final Provider<AppDatabase> databaseProvider;

  public AppModule_ProvideAppDapFactory(Provider<AppDatabase> databaseProvider) {
    this.databaseProvider = databaseProvider;
  }

  @Override
  public AppDao get() {
    return provideAppDap(databaseProvider.get());
  }

  public static AppModule_ProvideAppDapFactory create(Provider<AppDatabase> databaseProvider) {
    return new AppModule_ProvideAppDapFactory(databaseProvider);
  }

  public static AppDao provideAppDap(AppDatabase database) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideAppDap(database));
  }
}
